SEMANA 4.

20/11.

1- Ainda sobre o projeto criado anteriormente.

a) Crie uma rota para fazer um update de user pelo id.
b) Crie uma rota para o soft delete, tornando o isActive do user para false.
c) Nas rotas que buscam o usuário pelo id, caso ele não exista deve ser retornada uma exceção.

** Desafio -> Faça a documentação das rotas criadas até agora com o Swagger.

21/11.

1- Ainda sobre o projeto criado anteriormente.

a) Crie um método no service de users para buscar um user pelo email, retornando também a senha.
b) Crie um módulo para auth.
c) Crie um controller e um service para auth.
d) Crie uma rota para login, retornando um JWT token. Utilize o @nestjs/jwt.

** Desafio -> Crie um auth guard para proteção das rotas.
** Desafio -> Crie uma rota GET -> /users/profile utilizando o guard para retornar informações do usuário contido no token.

22/11.

1- Ainda sobre o projeto criado anteriormente.

a) Crie uma nova entidade Address (id, street, city, zipCode).
b) Rode o projeto e verifique se tabela foi criada corretamente.
c) Crie uma nova resource de Adresses. Todas rotas devem ser protegidas.
d) Crie uma rota de post de Adresses (faça validações no dto).

** Desafio -> Crie uma rota de patch de Adresses

23/11.

1- Ainda sobre o projeto criado anteriormente.

a) Crie uma rota para buscar todos Adresses.
b) Adicione na entidade Adress o relacionamento 1:1 com user (não pode ser nulo)
c) Na rota profile do user, modifique para juntamente voltar o Adress do mesmo. (dica: typeORM relations)

2- 

a) Crie uma nova entidade Pet (id, name, age, breed -> todos obrigatórios e user (relacionamento N:1) -> não pode ser nulo)
b) Rode o projeto e verifique se tabela foi criada corretamente.
c) Crie uma rota para criação de Pets

** Desafio -> Crie uma rota para buscar um pet pelo id, voltando também as informações do usuário relacionado.
** Desafio -> Modifique a rota de patch de Adresses para que somente o user pertencente ao Address possa modificá-lo.
